
                            {%for x in range(0, context.categories[y].len) %}
                            <br />
                            <label for="filter_{{context.categories[y][x].code}}">Show {{context.categories[y][x].name}}</label>
                            <input type="checkbox" checked id="filter_{{context.categories[y][x].code}}" value="Y" name="filter_{{context.categories[y][x].code}}" />
                            {%endfor%}


                            


@Vanya

Yeah, 2da edits is the way I'm leaning as well.

As for merchants, I'm actually leaning toward merchants who will not buy items at all, and only sell basic things, and the majority of the trade in-game being in the form of a scripted PC>PC Auction House like in WoW.

Here's what I've found:

https://groups.google.com/forum/#!topic/khalidine-dev/IblIu_6mSAw(link is external)

<code>4.4.1. Base Cost

ItemCost = [BaseCost + 1000*(Multiplier^2 - NegMultiplier^2) + SpellCosts]*MaxStack*BaseMult + AdditionalCost


where:
BaseMult = ItemMultiplier column value from baseitems.2da.
AdditionalCost = AddCost Field from the Item Struct.

and the other terms are as defined in the following subsections:


4.4.2. Multipliers

Multiplier is the sum of the costs of all the Item Properties whose costs are positive. That is:
NegMultiplier is the sum of the costs of all Item Properties whose costs are negative.
If an Item Property has a PropertyName of 15 (Cast Spell), then omit it from the Multiplier/NegMultiplier totals. It will be handled when calculating the SpellCosts instead.

To calculate the cost of a single Item Property, use the following formula:

ItemPropertyCost = PropertyCost + SubtypeCost + CostValue

Add the ItemProperty's cost to the Multiplier total if it is positive. Add it to the NegMultiplier total if it is negative.
Note that Item Property Params do not affect Item Property cost.
The PropertyCost, SubtypeCost, and CostValue terms are obtained as described below.

PropertyCost

In itempropdef.2da, get the floating point value in the Cost column, at the row indexed by the PropertyName Field of the ItemProperty Struct. If the Cost column value is ****, treat it as 0. This floating point value is the PropertyCost.

SubtypeCost

If the PropertyCost obtained above from itempropdef.2da was 0, then get the ResRef in the SubTypeResRef column of itempropdef.2da, at the row indexed by the 2PropertyName Field of the ItemProperty Struct. This is the resref of the subtype table 2da.
In the subtype 2da, get the floating point value in the Cost column at the row indexed by the Subtype Field of the ItemProperty Struct. This floating point value is the SubtypeCost.
Only get the SubtypeCost if the PropertyCost was 0. If the PropertyCost was greater than 0, then the SubtypeCost is automatically 0 instead.

CostValue

In iprp_costtable.2da, get the string in the Name column at the row indexed by the CostTable Field in the ItemProperty Struct. This is the ResRef of the cost table 2da.
In the cost table, get the floating point value in the Cost column in the row indexed by the CostValue Field in the ItemProperty Struct. This floating point value is the CostValue.

4.4.3. Cast Spell Costs

To calculate the cost of a single Cast Spell Item Property, use the following formula:
CastSpellCost = (PropertyCost + CostValue)* SubtypeCost
The PropertyCost, SubtypeCost, and CostValue terms are obtained in the same way as for non-CastSpell Item Properties.
After calculating all the CastSpellCost values for all the Cast Spell Item Properties, modify them as follows:
• Most expensive: multiply by 100%
• Second most expensive: multiply by 75%
• All others: multiply by 50%

 

After adjusting the CastSpellCosts, add them up to obtain the total SpellCosts value. Use the total SpellCosts to calculate the total ItemCost using the formula given at the very beginning of Section 4.4.</code>

Though, apparently there are some bugs in this formula, it's close to correct. The correct formula is outlined here(link is external).

So, you could set all the item base costs to 0; adjust your item property prices to give you the results you're looking for based on the formula; and update your item level restrictions 2da and gold drops to reflect the new prices of items.

As for the approach of modifying the "additionalcost" variable via scripting, well, I haven't figured out how to do that yet.

